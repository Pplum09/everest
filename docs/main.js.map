{"version":3,"sources":["./src/app/components/summary/summary.component.ts","./src/app/components/summary/summary.component.html","./src/environments/environment.ts","./src/app/components/home/home.component.ts","./src/app/components/home/home.component.html","./src/app/pipes/pretty-months.pipe.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/components/add-card-form/add-card-form.component.ts","./src/app/components/add-card-form/add-card-form.component.html","./src/app/app.module.ts","./src/app/components/cred-card-list/cred-card-list.component.ts","./src/app/components/cred-card-list/cred-card-list.component.html","./src/app/app-routing.module.ts","./src/app/services/finance.service.ts","./src/app/models/card.ts","./src/main.ts","./$_lazy_route_resource lazy namespace object"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["import { Component, OnInit, Input, OnChanges, SimpleChanges } from '@angular/core';\nimport {CreditCard} from 'src/app/models/credit-card.model';\n\nexport interface PaydownRate {\n  name: string;\n  series: {\n    name: string;\n    value: number;\n  }[];\n}\n@Component({\n  selector: 'app-summary',\n  templateUrl: './summary.component.html',\n  styleUrls: ['./summary.component.scss'],\n})\nexport class SummaryComponent implements OnInit, OnChanges {\n\n  @Input() creditCards: CreditCard[];\n  @Input() paydownRate: number;\n\n  private months = [\n    'January',\n    'February',\n    'March',\n    'April',\n    'May',\n    'June',\n    'July',\n    'August',\n    'September',\n    'October',\n    'November',\n    'December',\n  ];\n\n  public totalBalance = 0;\n  public totalPayoff: PaydownRate[] = [];\n\n  // options\n  showXAxis = true;\n  showYAxis = true;\n  gradient = false;\n  showLegend = true;\n  showXAxisLabel = true;\n  xAxisLabel = 'Month';\n  showYAxisLabel = true;\n  yAxisLabel = 'Balance';\n  autoScale = false;\n\n  constructor() { }\n\n  ngOnInit(): void { }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.totalBalance = 0;\n    //this.paydownRate = 2000;\n    if (changes.hasOwnProperty('creditCards')) {\n      for (const card of changes.creditCards.currentValue) {\n        this.totalBalance += card.balance;\n      }\n      this.computePayoff();\n    }\n  }\n\n  public computePayoff(): void {\n    let balance = this.totalBalance\n    let paydownRate = this.paydownRate\n    const series = [];\n    const today = new Date();\n    let currentMonth = today.getMonth();\n    let year = today.getFullYear();\n    do {\n      series.push({\n        name: `${this.months[currentMonth]} '${year - 2000}`,\n        value: Math.trunc(balance),\n      });\n      balance = balance - paydownRate;\n      currentMonth += currentMonth >= this.months.length - 1 ? -currentMonth : 1;\n      if (currentMonth === 0) {\n        year++;\n      }\n    } while (balance > 0);\n\n    const result = [{name: 'Citi Bank', series}];\n    this.totalPayoff = result;\n  }\n  public computeInterest() {\n\n  }\n}\n","<div class=\"container\">\n  <button (click)=\"computeInterest()\">Compute Interest</button>\n  <input (keyup)=\"computePayoff()\" [(ngModel)]=\"paydownRate\" />\n  <input (keyup)=\"computePayoff()\" [(ngModel)]=\"totalBalance\" />\n  <ngx-charts-line-chart\n    [results]=\"totalPayoff\"\n    [gradient]=\"gradient\"\n    [xAxis]=\"showXAxis\"\n    [yAxis]=\"showYAxis\"\n    [legend]=\"showLegend\"\n    [showXAxisLabel]=\"showXAxisLabel\"\n    [showYAxisLabel]=\"showYAxisLabel\"\n    [xAxisLabel]=\"xAxisLabel\"\n    [yAxisLabel]=\"yAxisLabel\"\n    [autoScale]=\"autoScale\"\n    scheme=\"vivid\"\n  >\n  </ngx-charts-line-chart>\n</div>\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { Component, OnInit } from '@angular/core';\nimport { CreditCard } from 'src/app/models/credit-card.model';\nimport { FinanceService } from 'src/app/services/finance.service';\n\nexport interface PeriodicElement {\n  name: string;\n  position: number;\n  weight: number;\n  symbol: string;\n}\n\nconst ELEMENT_DATA: PeriodicElement[] = [\n  {position: 1, name: 'Hydrogen', weight: 1.0079, symbol: 'H'},\n];\n\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.scss'],\n})\nexport class HomeComponent implements OnInit {\n\n  public monthsToPayoff = 0;\n  public totalPrincipal = 0;\n  public totalInterestPaid = 0;\n  public totalPaid = 0;\n  public displayForm = false;\n  public creditCards: CreditCard[] = [\n    {\n      name: 'Citi',\n      balance: 1300.21,\n      interest: 23.16,\n    },\n    {\n      name: 'Discover',\n      balance: 4320.83,\n      interest: 18.02,\n    },\n    {\n      name: 'Bank of America',\n      balance: 3402.97,\n      interest: 21.47,\n    },\n  ];\n\n  public monthlyPayment = 500;\n  public data = [];\n  inputColumns = ['position', 'name', 'weight', 'symbol'];\n  inputData = ELEMENT_DATA;\n  displayColumns: string[];\n  displayData: any[];\n\n  constructor(\n    public financeService: FinanceService,\n  ) { }\n\n  ngOnInit(): void {\n        this.displayColumns = ['0'].concat(this.inputData.map(x => x.position.toString()));\n    this.displayData = this.inputColumns.map(x => this.formatInputRow(x));\n  }\n\n  public calculate(): void {\n    //this.data = this.financeService.computeInterest(this.creditCards, this.monthlyPayment);\n    this.totalPrincipal = this.getTotalPrincipal(this.creditCards);\n    const monthlyPayment = +this.monthlyPayment;\n    const results = this.financeService.calculatePayoff(this.creditCards, monthlyPayment);\n    this.monthsToPayoff = results.totalMonths;\n    this.totalInterestPaid = results.totalPayment - this.totalPrincipal;\n    this.totalPaid = this.totalInterestPaid + this.totalPrincipal;\n  }\n\n  private getTotalPrincipal(cards: CreditCard[]): number {\n    let sum = 0;\n    for (const card of cards) {\n      sum += card.balance;\n    }\n    return sum;\n  }\n\n  public getTime(months: number): string {\n    if (months === this.financeService.maxMonths) {\n      return 'Never.';\n    }\n\n    const year = Math.trunc((months / 12));\n    const month = months % 12;\n    if (year && month) {\n      return `${year} years ${month} months`;\n    } else if (!year && month) {\n      return `${month} months`;\n    } else if (year && !month) {\n      return `${year} years`;\n    }\n    return 'n/a';\n  }\n\n  public displayCardForm(): void {\n    this.displayForm = true;\n  }\n\n  public cardCreated(): void {\n    this.displayForm = false;\n  }\n\n  public formatInputRow(row) {\n    const output = {};\n\n    output[0] = row;\n    for (let i = 0; i < this.inputData.length; ++i) {\n      output[this.inputData[i].position] = this.inputData[i][row];\n    }\n\n    return output;\n  }\n}\n","<div class=\"container\">\n  <div class=\"configuration\">\n    <app-cred-card-list\n      *ngIf=\"creditCards.length\"\n      [(creditCards)]=\"creditCards\"\n      class=\"cc-list\"\n    ></app-cred-card-list>\n    <button\n      *ngIf=\"creditCards.length && !displayForm\"\n      (click)=\"displayCardForm()\"\n      mat-raised-button\n      color=\"primary\"\n    >\n      Add Card\n    </button>\n    <app-add-card-form\n      *ngIf=\"!creditCards.length || displayForm\"\n      [(creditCards)]=\"creditCards\"\n      (cardCreated)=\"cardCreated()\"\n    ></app-add-card-form>\n    <br />\n    <mat-divider></mat-divider>\n    <br />\n    <mat-form-field appearance=\"outline\">\n      <mat-label>Estimated Monthly Payment</mat-label>\n      <input [(ngModel)]=\"monthlyPayment\" matInput autocomplete=\"off\" />\n    </mat-form-field>\n    <button (click)=\"calculate()\" mat-raised-button color=\"primary\">\n      Calculate\n    </button>\n    <br />\n    <mat-divider></mat-divider>\n    <br />\n\n    <mat-card>\n      <h1 class=\"mat-h1\">Your Results</h1>\n      <mat-list role=\"list\">\n        <mat-list-item role=\"listitem\">\n          <div class=\"list-item\">\n            <div>Monthly payment</div>\n            <div>\n              <b>{{ monthlyPayment | currency }} </b>\n            </div>\n          </div>\n        </mat-list-item>\n        <mat-list-item role=\"listitem\">\n          <div class=\"list-item\">\n            <div>Total Time</div>\n            <div>\n              <b>{{ monthsToPayoff | prettyMonth }}</b>\n            </div>\n          </div>\n        </mat-list-item>\n        <mat-list-item role=\"listitem\">\n          <div class=\"list-item\">\n            <div>Total Principal Paid</div>\n            <div>{{ this.totalPrincipal | currency }}</div>\n          </div>\n        </mat-list-item>\n        <mat-divider></mat-divider>\n        <mat-list-item role=\"listitem\">\n          <div class=\"list-item\">\n            <div>Total Interest Paid</div>\n            <div>{{ totalInterestPaid | currency }}</div>\n          </div>\n        </mat-list-item>\n        <mat-list-item role=\"listitem\">\n          <div class=\"list-item\">\n            <div>Total Paid</div>\n            <div>{{ totalPaid | currency }}</div>\n          </div>\n        </mat-list-item>\n      </mat-list>\n    </mat-card>\n  </div>\n  <!--<div class=\"chart\">-->\n  <!--<ngx-charts-line-chart-->\n  <!--[results]=\"data\"-->\n  <!--[gradient]=\"false\"-->\n  <!--[xAxis]=\"true\"-->\n  <!--[yAxis]=\"true\"-->\n  <!--[legend]=\"true\"-->\n  <!--[showXAxisLabel]=\"true\"-->\n  <!--[showYAxisLabel]=\"true\"-->\n  <!--xAxisLabel=\"Month\"-->\n  <!--yAxisLabel=\"Balance\"-->\n  <!--[autoScale]=\"true\"-->\n  <!--scheme=\"vivid\"-->\n  <!--></ngx-charts-line-chart>-->\n  <!--</div>-->\n</div>\n","import {Pipe, PipeTransform} from \"@angular/core\";\n\n@Pipe({name: 'prettyMonth'})\nexport class PrettyMonth implements PipeTransform {\n  transform(value: string): string {\n    const months = parseInt(value);\n    if (months === 40 * 12) {\n      return 'Never.';\n    }\n\n    const year = Math.trunc((months / 12));\n    const month = months % 12;\n    if (year && month) {\n      return `${year} years ${month} value`;\n    } else if (!year && month) {\n      return `${month} value`;\n    } else if (year && !month) {\n      return `${year} years`;\n    }\n    return 'n/a';\n\n  }\n}\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  title = 'everest';\n}\n","<app-home></app-home>\n","import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\nimport {CreditCard} from 'src/app/models/credit-card.model';\nimport {FormGroup, Validators, FormControl} from '@angular/forms';\n\n@Component({\n  selector: 'app-add-card-form',\n  templateUrl: './add-card-form.component.html',\n  styleUrls: ['./add-card-form.component.scss'],\n})\nexport class AddCardFormComponent implements OnInit {\n\n  @Input() creditCards: CreditCard[];\n  @Output() creditCardsChange: EventEmitter<CreditCard[]> = new EventEmitter();\n  @Output() cardCreated: EventEmitter<any> = new EventEmitter();\n\n  public creditCardForm = new FormGroup({\n    name: new FormControl('', Validators.required),\n    balance: new FormControl('', Validators.required),\n    interest: new FormControl('', Validators.required),\n  });\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n  public addCard(): void {\n    if (this.creditCardForm.valid) {\n      this.creditCards.push({\n        name: this.creditCardForm.value.name,\n        balance: parseInt(this.creditCardForm.value.balance),\n        interest: parseInt(this.creditCardForm.value.interest),\n      });\n\n      this.creditCardForm.reset();\n      this.creditCardsChange.emit([...this.creditCards]);\n      this.cardCreated.emit();\n    }\n  }\n}\n","<form [formGroup]=\"creditCardForm\" (ngSubmit)=\"addCard()\" class=\"container\">\n  <mat-form-field appearance=\"outline\">\n    <mat-label>Name</mat-label>\n    <input formControlName=\"name\" matInput autocomplete=\"off\" />\n  </mat-form-field>\n  <mat-form-field appearance=\"outline\">\n    <mat-label>Balance Owed</mat-label>\n    <input formControlName=\"balance\" matInput autocomplete=\"off\" />\n  </mat-form-field>\n  <mat-form-field appearance=\"outline\">\n    <mat-label>Interest Rate</mat-label>\n    <input formControlName=\"interest\" matInput autocomplete=\"off\" />\n  </mat-form-field>\n  <button mat-raised-button color=\"primary\">Add Card</button>\n</form>\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { HomeComponent } from './components/home/home.component';\nimport { MatListModule } from '@angular/material/list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatButtonModule } from '@angular/material/button';\nimport { CredCardListComponent } from './components/cred-card-list/cred-card-list.component';\nimport { MatInputModule } from '@angular/material/input';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { AddCardFormComponent } from './components/add-card-form/add-card-form.component';\nimport { SummaryComponent } from './components/summary/summary.component';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { NgxChartsModule } from '@swimlane/ngx-charts';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatTableModule } from '@angular/material/table';\nimport { PrettyMonth } from 'src/app/pipes/pretty-months.pipe';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    HomeComponent,\n    CredCardListComponent,\n    AddCardFormComponent,\n    SummaryComponent,\n    PrettyMonth,\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    BrowserAnimationsModule,\n    MatListModule,\n    MatIconModule,\n    MatButtonModule,\n    MatInputModule,\n    FormsModule,\n    ReactiveFormsModule,\n    MatExpansionModule,\n    NgxChartsModule,\n    MatSliderModule,\n    MatFormFieldModule,\n    MatCardModule,\n    MatTableModule,\n  ],\n  providers: [],\n  bootstrap: [AppComponent],\n})\nexport class AppModule { }\n","import {Component, OnInit, Input, EventEmitter, Output } from '@angular/core';\nimport { CreditCard } from '../../models/credit-card.model';\n\n@Component({\n  selector: 'app-cred-card-list',\n  templateUrl: './cred-card-list.component.html',\n  styleUrls: ['./cred-card-list.component.scss'],\n})\nexport class CredCardListComponent implements OnInit {\n\n  @Input() creditCards: CreditCard[];\n  @Output() creditCardsChange: EventEmitter<CreditCard[]> = new EventEmitter();\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n  public remove(index: number): void {\n    this.creditCards.splice(index, 1);\n    this.creditCardsChange.emit([...this.creditCards]);\n  }\n}\n","<mat-list>\n  <!--<div mat-subheader>Credit Cards</div>-->\n  <mat-list-item\n    *ngFor=\"let creditCard of creditCards; last as last; let i = index\"\n  >\n    <mat-icon mat-list-icon>credit_card</mat-icon>\n    <div mat-line>{{ creditCard.name }}</div>\n    <div mat-line>${{ creditCard.balance }} - {{ creditCard.interest }}%</div>\n    <button (click)=\"remove(i)\" mat-icon-button>\n      <mat-icon>clear</mat-icon>\n    </button>\n    <mat-divider *ngIf=\"!last\"></mat-divider>\n  </mat-list-item>\n</mat-list>\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nconst routes: Routes = [];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { Injectable } from '@angular/core';\nimport { Card } from 'src/app/models/card';\n\nconst DEBUG = false;\n\nexport interface CreditCard {\n  name: string;\n  balance: number;\n  interest: number;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class FinanceService {\n\n  private months = [\n    'January',\n    'February',\n    'March',\n    'April',\n    'May',\n    'June',\n    'July',\n    'August',\n    'September',\n    'October',\n    'November',\n    'December',\n  ];\n\n  /** represents the max amount of months we will make calculations\n   *  the assumption is that you should never need 40 years to pay off cc debt\n   */\n  public maxMonths = 40 * 12;\n  constructor() { }\n\n  private computeTotalBalance(cards: CreditCard[]): number {\n    let totalBalance = 0;\n    for (const card of cards) {\n      totalBalance += card.balance;\n    }\n\n    return totalBalance;\n  }\n\n  private getInterest(balance: number, dailyInterest: number): number {\n    return (30 * balance * dailyInterest) + balance\n  }\n\n  private shallowCopy(card: CreditCard): CreditCard {\n    return {\n      name: card.name,\n      balance: card.balance,\n      interest: card.interest,\n    }\n  }\n\n  private constructCardObjs(creditCards: CreditCard[]): Card[] {\n    const cards = [];\n    const minimumPayment = 35;\n    for (const card of creditCards) {\n      cards.push(new Card(card.balance, card.interest, card.name, minimumPayment));\n    }\n    return cards\n  }\n\n  private allDebtsPaid(cards: Card[]): boolean {\n    return cards.every(card => card.isPaidOff());\n  }\n\n  private findAndFocusCard(cards: Card[]): void {\n    let focusNextCard = false;\n    for (const card of cards) {\n\n      // although payoff of the last card in the list will also set this\n      // variable, the loop will finish before it is read on a card that would\n      // have been out of bounds.\n      if (focusNextCard) {\n        card.focus();\n        focusNextCard = false;\n      }\n\n      if (card.focused && card.isPaidOff()) {\n        focusNextCard = true;\n        card.unfocus()\n      }\n\n    }\n  }\n\n  private payAllCards(cards: Card[], payment: number): number {\n\n    // if a card is paid off in one iteration, then the remaining payment will\n    // go toward the next card. This includes minimum payments as well.\n    let remainingMoney = 0;\n    let totalPayment = 0;\n    for (const card of cards) {\n      let paymentAmount = 0;\n      if (card.focused) {\n        paymentAmount = payment;\n      } else {\n        paymentAmount = card.minimumPayment;\n      }\n\n\n      const leftOver = card.balance - paymentAmount;\n      if (leftOver < 0) {\n        remainingMoney += -leftOver;\n        paymentAmount -= remainingMoney;\n      }\n      const finalPayment = paymentAmount + remainingMoney;\n      totalPayment += finalPayment;\n      card.applyPayment(finalPayment);\n    }\n\n    // moves the focused card to next if current card has been paid off\n    // during this iteration\n    this.findAndFocusCard(cards);\n    return totalPayment;\n  }\n\n  private applyInterest(cards: Card[]): void {\n    for (const card of cards) {\n      if (!card.isPaidOff()) {\n        card.applyInterest();\n      }\n    }\n  }\n\n  private calculateMontlyPayment(cards: Card[], payment: number): number {\n    for (const card of cards) {\n      payment -= card.minimumPayment;\n    }\n    return payment;\n  }\n\n  public calculatePayoff(creditCards: CreditCard[], payment: number): {totalMonths: number, totalPayment: number} {\n\n    const cards = this.constructCardObjs(creditCards);\n    let currentMonth = 0;\n    let totalPayment = 0;\n    cards[0].focus();\n    do {\n      // pay off debt\n      const currentPayment = this.payAllCards(cards, payment);\n      totalPayment += currentPayment;\n\n      // apply interest\n      this.applyInterest(cards);\n\n      // iterate time\n      currentMonth++;\n\n      // print state\n      if (DEBUG) {\n        for (const card of cards) {\n          card.prettyPrint()\n        }\n      }\n    } while (!this.allDebtsPaid(cards) && currentMonth < this.maxMonths);\n\n    const results = {\n      totalMonths: currentMonth,\n      totalPayment,\n    }\n    return results;\n  }\n\n  public computeInterest(creditCards: CreditCard[], monthlyPayment: number) {\n\n    let currentCardIndex = 0;\n    let results = [];\n    const today = new Date();\n    let year = today.getFullYear();\n    const startYear = year;\n    let currentMonth = today.getMonth();\n    const ccCopy = [];\n\n    let totalBalance = this.computeTotalBalance(creditCards);\n    const cardMap = {Total: [{\n      name: `${this.months[currentMonth]} '${year - 2000}`,\n      value: Math.trunc(totalBalance),\n    }]};\n    for (const card of creditCards) {\n      let fuck = this.shallowCopy(card)\n      ccCopy.push(fuck);\n      cardMap[card.name] = [{\n        name: `${this.months[currentMonth]} '${year - 2000}`,\n        value: Math.trunc(card.balance),\n      }];\n    }\n    currentMonth += currentMonth >= this.months.length - 1 ? -currentMonth : 1;\n    if (currentMonth === 0) {\n      year++;\n    }\n    do {\n\n      // pay down current card\n      ccCopy[currentCardIndex].balance -= monthlyPayment;\n      if (ccCopy[currentCardIndex].balance < 0) {\n        ccCopy[currentCardIndex].balance = 0;\n      }\n      totalBalance = 0\n      for (let i = 0; i < ccCopy.length; i++) {\n\n        // apply interest to all cards\n        const dailyInterest = ccCopy[i].interest / 100 / 365;\n        ccCopy[i].balance = this.getInterest(\n          ccCopy[i].balance,\n          dailyInterest\n        );\n\n        // calculate total balance\n        totalBalance += ccCopy[i].balance;\n\n        // apply balance to appropriate card series\n        cardMap[ccCopy[i].name].push({\n          name: `${this.months[currentMonth]} '${year - 2000}`,\n          value: Math.trunc(ccCopy[i].balance),\n        });\n\n      }\n\n      // add total balance to series\n      cardMap['Total'].push({\n        name: `${this.months[currentMonth]} '${year - 2000}`,\n        value: Math.trunc(totalBalance),\n      });\n\n      // increment current card if balance is 0\n      currentMonth += currentMonth >= this.months.length - 1 ? -currentMonth : 1;\n      if (currentMonth === 0) {\n        year++;\n      }\n\n      if (ccCopy[currentCardIndex].balance <= 0) {\n        currentCardIndex++;\n      }\n\n    } while (totalBalance > 0 && year < startYear + 40 && currentCardIndex < ccCopy.length);\n\n\n\n    // apply to graph\n    for (var key of Object.keys(cardMap)) {\n      results.push({name: key, series: cardMap[key]});\n    }\n\n    return results;\n  }\n}\n","export class Card {\n  balance: number;\n  interest: number;\n  dailyInterest: number;\n  name: string;\n  focused: boolean;\n  minimumPayment: number;\n\n  constructor(balance: number, interest: number, name: string, minimumPayment: number) {\n    this.balance = balance;\n    this.interest = interest;\n    this.name = name;\n    this.focused = false;\n    this.dailyInterest = this.interest / 100 / 365;\n    this.minimumPayment = minimumPayment;\n  }\n\n  public applyInterest(): void {\n    this.balance = (30 * this.balance * this.dailyInterest) + this.balance;\n  }\n\n  public isPaidOff(): boolean {\n    return this.balance <= 0;\n  }\n\n  public applyPayment(payment: number): void {\n    if (this.balance > 0) {\n      this.balance -= payment;\n      if (this.balance <= 0) {\n        this.balance = 0;\n      }\n    }\n  }\n\n  public prettyPrint(): void {\n    console.log(`name: ${this.name}, balance: ${this.balance}, focused: ${this.focused}`);\n  }\n\n  public focus(): void {\n    this.focused = true;\n  }\n\n  public unfocus(): void  {\n    this.focused = false;\n  }\n}\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"],"sourceRoot":"webpack:///"}